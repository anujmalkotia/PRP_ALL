1.


Write a java program that generates the minimum and maximum value for each of the Numeric Wrapper classes (Byte, Short, nteger, Long, Float, Double)

Sample Output:
Integer range: 
min: -2147483648 
max: 2147483647 
Double range: 
min: 4.9E-324 
max: 1.7976931348623157E308 
Long range: 
min: -9223372036854775808 
max: 9223372036854775807 
Short range: 
min: -32768 
max: 32767 
Byte range: 
min: -128 
max: 127 
Float range: 
min: 1.4E-45 
max: 3.4028235E38

public class Assignment1 {

	public static void main(String[] args) {
		System.out.println("Integer range:");
		System.out.println("min: " + Integer.MIN_VALUE);
		System.out.println("max: " + Integer.MAX_VALUE);

		System.out.println("Double range:");
		System.out.println("min: " + Double.MIN_VALUE);
		System.out.println("max: " + Double.MAX_VALUE);

		System.out.println("Long range:");
		System.out.println("min: " + Long.MIN_VALUE);
		System.out.println("max: " + Long.MAX_VALUE);

		System.out.println("Short range:");
		System.out.println("min: " + Short.MIN_VALUE);
		System.out.println("max: " + Short.MAX_VALUE);

		System.out.println("Byte range:");
		System.out.println("min: " + Byte.MIN_VALUE);
		System.out.println("max: " + Byte.MAX_VALUE);

		System.out.println("Float range:");
		System.out.println("min: " + Float.MIN_VALUE);
		System.out.println("max: " + Float.MAX_VALUE);
	}

}


2.
 Write a program to receive an integer number as a command line argument, and print the binary, octal and hexadecimal equivalent of the given number.

Sample Output:

java  Test 20
Given Number :20
Binary equivalent :10100
Octal equivalent :24
Hexadecimal equivalent :14

public class Assignment2 {

	public static void main(String[] args) {
		int num = Integer.parseInt(args[0]);
		
		System.out.println("Given Number: " + num);		
		System.out.println("Binary equivalent: " + Integer.toBinaryString(num));
		System.out.println("Octal equivalent: " + Integer.toOctalString(num));
		System.out.println("Hexadecimal equivalent: " + Integer.toHexString(num));

	}

}


3.
Write a Java program that reads an integer number (between 1 and 255) from the user and prints the binary representation of the number. The answer should be printed as a String.

Note: The output displayed should contain 8 digits and should be padded with leading 0s(zeros), in case the returned String contains less than 8 characters.

For example, if the user enters the value 16, then the output should be
 00010000

and if the user enters the value 100, the output should be
 01100100

You are expected to use Integer class conversion method/s described in the PDF file. 
Use Scanner class to accept user inputs.
(Hint : You may use String.format() method for the expected output)

import java.util.Scanner;

public class Assignment3 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int input = sc.nextInt();
		
		String output = String.format("%8s", Integer.toBinaryString(input)).replace(' ', '0');
		System.out.println(output);
		
		
		sc.close();

	}

}

4.
Create an employee class with properties of your choice. Create an object of this class and also create a clone of the same. After making the clone, change the properties of the original employee object and print the properties of both the original and clone object and note down your observation.

class Employee implements Cloneable {
	private String name;
	
	public Employee(String name) {
		this.name = name;
	}
	
//	public Employee(Employee emp) {
//		this.name = emp.name;
//	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	@Override
	public Employee clone() {
		try {
			return (Employee) super.clone();
		} catch (CloneNotSupportedException e) {
			System.out.println("Cloning Not Allowed");
			return this;
		}		
	}
}

public class Assignment4 {

	public static void main(String[] args) {
		Employee emp = new Employee("Bob Biswas");
		Employee empClone = emp.clone();
		
		empClone.setName("John Doe");
		
		System.out.println(empClone.getName());
		System.out.println(emp.getName());
	}

}
